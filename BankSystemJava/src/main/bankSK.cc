// This file is generated by omniidl (C++ backend)- omniORB_4_1. Do not edit.

#include "bank.hh"
#include <omniORB4/IOP_S.h>
#include <omniORB4/IOP_C.h>
#include <omniORB4/callDescriptor.h>
#include <omniORB4/callHandle.h>
#include <omniORB4/objTracker.h>


OMNI_USING_NAMESPACE(omni)

static const char* _0RL_library_version = omniORB_4_1;



// valuetype record

void
Bank::record_Helper::add_ref(::Bank::record* _v)
{
  if (_v) _v->_add_ref();
}

void
Bank::record_Helper::remove_ref(::Bank::record* _v)
{
  if (_v) _v->_remove_ref();
}

Bank::record*
Bank::record::_downcast(::CORBA::ValueBase* _b)
{
  return _b ? (Bank::record*)_b->_ptrToValue(_PD_repoId) : 0;
}

const char* Bank::record::_PD_repoId = "IDL:Bank/record:1.0";

const char*
Bank::record::_NP_repositoryId() const
{
  return _PD_repoId;
}

const char*
Bank::record::_NP_repositoryId(::CORBA::ULong& hash) const
{
  hash = 3684837302U;
  return _PD_repoId;
}

::CORBA::Boolean
Bank::record::_NP_custom() const
{
  return 0;
}

void*
Bank::record::_ptrToValue(const char* _id)
{
  if (_id == ::Bank::record::_PD_repoId)
    return (::Bank::record*) this;
  
  

  if (_id == ::CORBA::ValueBase::_PD_repoId)
    return (::CORBA::ValueBase*) this;
  
  if (omni::strMatch(_id, ::Bank::record::_PD_repoId))
    return (::Bank::record*) this;
  
  

  if (omni::strMatch(_id, ::CORBA::ValueBase::_PD_repoId))
    return (::CORBA::ValueBase*) this;

  return 0;
}

void
Bank::record::_NP_marshal(Bank::record* _v, cdrStream& _0s)
{
  omniValueType::marshal(_v, Bank::record::_PD_repoId, _0s);
}

void
Bank::record_Helper::marshal(::Bank::record* _v, cdrStream& _0s)
{
  Bank::record::_NP_marshal(_v,_0s);
}

Bank::record*
Bank::record::_NP_unmarshal(cdrStream& _0s)
{
  ::CORBA::ValueBase* _b = omniValueType::unmarshal(Bank::record::_PD_repoId,
						    3684837302U, 0, _0s);
  Bank::record* _d = Bank::record::_downcast(_b);
  if (_b && !_d) {
    _b = omniValueType::handleIncompatibleValue(
           Bank::record::_PD_repoId,
           3684837302U, _b, (::CORBA::CompletionStatus)_0s.completion());
    _d = Bank::record::_downcast(_b);
  }
  return _d;
}

Bank::record*
Bank::record_Helper::unmarshal(cdrStream& _0s)
{
  return Bank::record::_NP_unmarshal(_0s);
}

void
Bank::record::_PR_marshal_state(cdrStream& _0s) const
{
  _0s.marshalString(source());

  _0s.marshalString(target());

  amount() >>= _0s;


}

void
Bank::record::_PR_unmarshal_state(cdrStream& _0s)
{
  char* _source;
  _source = _0s.unmarshalString();
  source(_source);


  char* _target;
  _target = _0s.unmarshalString();
  target(_target);


  ::CORBA::Double _amount;
  _amount <<= _0s;
  amount(_amount);



}

#ifdef OMNI_HAVE_COVARIANT_RETURNS
Bank::record*
#else
::CORBA::ValueBase*
#endif
Bank::record::_copy_value()
{
  ::CORBA::ValueBase* _b;
  _b = _omni_ValueFactoryManager::create_for_unmarshal(_PD_repoId, 3684837302U);
  Bank::record* _v = Bank::record::_downcast(_b);
  if (!_v) {
    ::CORBA::remove_ref(_b);
    OMNIORB_THROW(BAD_PARAM, BAD_PARAM_ValueFactoryFailure,
		  ::CORBA::COMPLETED_NO);
  }
  _v->_PR_copy_state(this);
  return _v;
}

void
Bank::record::_PR_copy_state(Bank::record* _v)
{
  source(_v->source());

  target(_v->target());

  amount(_v->amount());


}


Bank::record::record()  {}
Bank::record::~record() {}

OBV_Bank::record::record() {}
OBV_Bank::record::~record() {}

OBV_Bank::record::record(const char* _source, const char* _target, ::CORBA::Double _amount)

{
  _pd_source = _source;

  _pd_target = _target;

  _pd_amount = _amount;


}

const _omni_ValueIds*
Bank::record::_NP_truncatableIds() const
{
  return 0;
}

const char*
OBV_Bank::record::source() const
{
  return (const char*)_pd_source;
}

void
OBV_Bank::record::source(char* _value)
{
  _pd_source = _value;
}

void
OBV_Bank::record::source(const char* _value)
{
  _pd_source = _value;
}

void
OBV_Bank::record::source(const ::CORBA::String_var& _value)
{
  _pd_source = _value;
}


const char*
OBV_Bank::record::target() const
{
  return (const char*)_pd_target;
}

void
OBV_Bank::record::target(char* _value)
{
  _pd_target = _value;
}

void
OBV_Bank::record::target(const char* _value)
{
  _pd_target = _value;
}

void
OBV_Bank::record::target(const ::CORBA::String_var& _value)
{
  _pd_target = _value;
}


::CORBA::Double
OBV_Bank::record::amount() const
{
  return _pd_amount;
}

void
OBV_Bank::record::amount(::CORBA::Double _value)
{
  _pd_amount = _value;
}


Bank::record_init::record_init()  {}
Bank::record_init::~record_init() {}

Bank::record_init*
Bank::record_init::_downcast(::CORBA::ValueFactory _v)
{
  return _v ? (::Bank::record_init*)_v->_ptrToFactory(::Bank::record::_PD_repoId) : 0;
}

void*
Bank::record_init::_ptrToFactory(const char* _id)
{
  if (_id == ::Bank::record::_PD_repoId)
    return (::Bank::record_init*) this;
  
  if (_id == ::CORBA::ValueBase::_PD_repoId)
    return (::CORBA::ValueFactoryBase*) this;
  
  if (omni::strMatch(_id, ::Bank::record::_PD_repoId))
    return (::Bank::record_init*) this;
  
  if (omni::strMatch(_id, ::CORBA::ValueBase::_PD_repoId))
    return (::CORBA::ValueFactoryBase*) this;

  return 0;
}

::CORBA::ValueBase*
Bank::record_init::create_for_unmarshal()
{
  return new OBV_Bank::record();
}

Bank::BankService_ptr Bank::BankService_Helper::_nil() {
  return ::Bank::BankService::_nil();
}

::CORBA::Boolean Bank::BankService_Helper::is_nil(::Bank::BankService_ptr p) {
  return ::CORBA::is_nil(p);

}

void Bank::BankService_Helper::release(::Bank::BankService_ptr p) {
  ::CORBA::release(p);
}

void Bank::BankService_Helper::marshalObjRef(::Bank::BankService_ptr obj, cdrStream& s) {
  ::Bank::BankService::_marshalObjRef(obj, s);
}

Bank::BankService_ptr Bank::BankService_Helper::unmarshalObjRef(cdrStream& s) {
  return ::Bank::BankService::_unmarshalObjRef(s);
}

void Bank::BankService_Helper::duplicate(::Bank::BankService_ptr obj) {
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
}

Bank::BankService_ptr
Bank::BankService::_duplicate(::Bank::BankService_ptr obj)
{
  if( obj && !obj->_NP_is_nil() )  omni::duplicateObjRef(obj);
  return obj;
}

Bank::BankService_ptr
Bank::BankService::_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}


Bank::BankService_ptr
Bank::BankService::_unchecked_narrow(::CORBA::Object_ptr obj)
{
  if( !obj || obj->_NP_is_nil() || obj->_NP_is_pseudo() ) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_uncheckedNarrow(_PD_repoId);
  return e ? e : _nil();
}

Bank::BankService_ptr
Bank::BankService::_nil()
{
#ifdef OMNI_UNLOADABLE_STUBS
  static _objref_BankService _the_nil_obj;
  return &_the_nil_obj;
#else
  static _objref_BankService* _the_nil_ptr = 0;
  if( !_the_nil_ptr ) {
    omni::nilRefLock().lock();
    if( !_the_nil_ptr ) {
      _the_nil_ptr = new _objref_BankService;
      registerNilCorbaObject(_the_nil_ptr);
    }
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
#endif
}

const char* Bank::BankService::_PD_repoId = "IDL:Bank/BankService:1.0";


Bank::_objref_BankService::~_objref_BankService() {
  
}


Bank::_objref_BankService::_objref_BankService(omniIOR* ior, omniIdentity* id) :
   omniObjRef(::Bank::BankService::_PD_repoId, ior, id, 1)
   
   
{
  _PR_setobj(this);
}

void*
Bank::_objref_BankService::_ptrToObjRef(const char* id)
{
  if( id == ::Bank::BankService::_PD_repoId )
    return (::Bank::BankService_ptr) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (::CORBA::Object_ptr) this;

  if( omni::strMatch(id, ::Bank::BankService::_PD_repoId) )
    return (::Bank::BankService_ptr) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (::CORBA::Object_ptr) this;

  return 0;
}

// Proxy call descriptor class. Mangled signature:
//  _cBank_mrecordList_i_cstring_i_cstring
class _0RL_cd_54D1070592EE2149_00000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_54D1070592EE2149_00000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    containsValues(1);
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
  Bank::recordList_var result;
};

void _0RL_cd_54D1070592EE2149_00000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  _n.marshalString(arg_1,0);

}

void _0RL_cd_54D1070592EE2149_00000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();

}

void _0RL_cd_54D1070592EE2149_00000000::marshalReturnedValues(cdrStream& _n)
{
  (const Bank::recordList&) result >>= _n;

}

void _0RL_cd_54D1070592EE2149_00000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new Bank::recordList;
  (Bank::recordList&)result <<= _n;

}

const char* const _0RL_cd_54D1070592EE2149_00000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_54D1070592EE2149_10000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_54D1070592EE2149_00000000* tcd = (_0RL_cd_54D1070592EE2149_00000000*)cd;
  Bank::_impl_BankService* impl = (Bank::_impl_BankService*) svnt->_ptrToInterface(Bank::BankService::_PD_repoId);
  tcd->result = impl->listHistory(tcd->arg_0, tcd->arg_1);


}

Bank::recordList* Bank::_objref_BankService::listHistory(const char* account, const char* password)
{
  _0RL_cd_54D1070592EE2149_00000000 _call_desc(_0RL_lcfn_54D1070592EE2149_10000000, "listHistory", 12);
  _call_desc.arg_0 = account;
  _call_desc.arg_1 = password;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}
// Proxy call descriptor class. Mangled signature:
//  _cBank_mrecordListString_i_cstring_i_cstring
class _0RL_cd_54D1070592EE2149_20000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_54D1070592EE2149_20000000(LocalCallFn lcfn,const char* op_,size_t oplen,_CORBA_Boolean upcall=0):
     omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::String_var arg_1_;
  const char* arg_1;
  Bank::recordListString_var result;
};

void _0RL_cd_54D1070592EE2149_20000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  _n.marshalString(arg_1,0);

}

void _0RL_cd_54D1070592EE2149_20000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  arg_1_ = _n.unmarshalString(0);
  arg_1 = arg_1_.in();

}

void _0RL_cd_54D1070592EE2149_20000000::marshalReturnedValues(cdrStream& _n)
{
  (const Bank::recordListString&) result >>= _n;

}

void _0RL_cd_54D1070592EE2149_20000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = new Bank::recordListString;
  (Bank::recordListString&)result <<= _n;

}

const char* const _0RL_cd_54D1070592EE2149_20000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_54D1070592EE2149_30000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_54D1070592EE2149_20000000* tcd = (_0RL_cd_54D1070592EE2149_20000000*)cd;
  Bank::_impl_BankService* impl = (Bank::_impl_BankService*) svnt->_ptrToInterface(Bank::BankService::_PD_repoId);
  tcd->result = impl->listInListString(tcd->arg_0, tcd->arg_1);


}

Bank::recordListString* Bank::_objref_BankService::listInListString(const char* account, const char* password)
{
  _0RL_cd_54D1070592EE2149_20000000 _call_desc(_0RL_lcfn_54D1070592EE2149_30000000, "listInListString", 17);
  _call_desc.arg_0 = account;
  _call_desc.arg_1 = password;

  _invoke(_call_desc);
  return _call_desc.result._retn();


}
Bank::_pof_BankService::~_pof_BankService() {}


omniObjRef*
Bank::_pof_BankService::newObjRef(omniIOR* ior, omniIdentity* id)
{
  return new ::Bank::_objref_BankService(ior, id);
}


::CORBA::Boolean
Bank::_pof_BankService::is_a(const char* id) const
{
  if( omni::ptrStrMatch(id, ::Bank::BankService::_PD_repoId) )
    return 1;
  
  return 0;
}

const Bank::_pof_BankService _the_pof_Bank_mBankService;

Bank::_impl_BankService::~_impl_BankService() {}


::CORBA::Boolean
Bank::_impl_BankService::_dispatch(omniCallHandle& _handle)
{
  const char* op = _handle.operation_name();

  if( omni::strMatch(op, "listHistory") ) {

    _0RL_cd_54D1070592EE2149_00000000 _call_desc(_0RL_lcfn_54D1070592EE2149_10000000, "listHistory", 12, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }

  if( omni::strMatch(op, "listInListString") ) {

    _0RL_cd_54D1070592EE2149_20000000 _call_desc(_0RL_lcfn_54D1070592EE2149_30000000, "listInListString", 17, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }


  return 0;
}

void*
Bank::_impl_BankService::_ptrToInterface(const char* id)
{
  if( id == ::Bank::BankService::_PD_repoId )
    return (::Bank::_impl_BankService*) this;
  
  if( id == ::CORBA::Object::_PD_repoId )
    return (void*) 1;

  if( omni::strMatch(id, ::Bank::BankService::_PD_repoId) )
    return (::Bank::_impl_BankService*) this;
  
  if( omni::strMatch(id, ::CORBA::Object::_PD_repoId) )
    return (void*) 1;
  return 0;
}

const char*
Bank::_impl_BankService::_mostDerivedRepoId()
{
  return ::Bank::BankService::_PD_repoId;
}

POA_Bank::BankService::~BankService() {}

